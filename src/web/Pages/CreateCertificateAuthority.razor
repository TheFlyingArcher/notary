@page "/ca/create"
@using C=Notary.Contract
@using Notary.Interface.Service
@using Notary.Web.ViewModels
@using System.Text.RegularExpressions
@inject ICertificateAuthorityService CertificateAuthorityService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large">
    <MudText Typo="Typo.h4">Create Certificate Authority</MudText>
    <MudDivider Class="mb-3" />
    @if (_formErrors.Length > 0)
    {
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">@($"Errors ({_formErrors.Length})")</MudText>
                @foreach (var error in _formErrors)
                {
                    <MudText Color="@Color.Error">
                        @error
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudDivider Class="mb-3" />
    }

    <MudForm @ref="_mudForm" Model="ViewModel" @bind-IsValid="_formValid" @bind-Errors="_formErrors">
        <MudSelect @bind-Value="@ViewModel.ParentCaSlug" Required="true" RequiredError="Select a parent CA or select No Parent"
                   Label="Select Parent CA" HelperText="Select a Certificate Authority" Placeholder="Please Select">
            <MudSelectItem Value="@("nop")">No Parent</MudSelectItem>
            @foreach (var ca in ViewModel.CertificateAuthorities)
            {
                <MudSelectItem Value="@ca.Slug">@ca.Name</MudSelectItem>
            }
        </MudSelect>
        <MudTextField @bind-Value="ViewModel.Name" Label="Name" Required="true" Validation="@(new Func<string, IEnumerable<string>>(ValidateName))"></MudTextField>
        <MudTextField @bind-Value="ViewModel.LengthInMonths" Label="CA Validity" HelperText="Enter the CA validity length in months e.g. 48"
                      Validation="@(new Func<int, IEnumerable<string>>(ValidateExpiration))"></MudTextField>
        <MudSwitch @bind-Value="ViewModel.IsIssuer" Label="Is Issuer"></MudSwitch>
        <MudTextField @bind-Value="ViewModel.CommonName" Required="true" RequiredError="Please enter a CA Common Name"
                      HelperText="The Common Name for the CA certificate"></MudTextField>
        <MudDivider Class="my-3" />
        <MudLink OnClick="@(() => ViewModel.AdditionalSubjectExpanded = !ViewModel.AdditionalSubjectExpanded)">Additional Properties</MudLink>
        <MudCollapse Expanded="ViewModel.AdditionalSubjectExpanded">
            <MudTextField @bind-Value="@ViewModel.Country" Label="Country" Disabled="ViewModel.SelectedCa!=null"></MudTextField>
            <MudTextField @bind-Value="@ViewModel.Locale" Label="Locale" Disabled="ViewModel.SelectedCa!=null"></MudTextField>
            <MudTextField @bind-Value="@ViewModel.Organization" Label="Organization" Disabled="ViewModel.SelectedCa!=null"></MudTextField>
            <MudTextField @bind-Value="@ViewModel.OrganizationalUnit" Label="Org Unit" Disabled="ViewModel.SelectedCa!=null"></MudTextField>
            <MudTextField @bind-Value="@ViewModel.StateProvince" Label="State" Disabled="ViewModel.SelectedCa!=null"></MudTextField>
        </MudCollapse>
        <MudDivider Class="my-3" />
        <MudLink OnClick="@(()=>ViewModel.KeyAlgorithmExpanded=!ViewModel.KeyAlgorithmExpanded)">Private Key Algorithm</MudLink>
        <MudCollapse Expanded="ViewModel.KeyAlgorithmExpanded">
            <MudRadioGroup @bind-Value="@ViewModel.KeyType" Disabled="ViewModel.SelectedCa!=null">
                <MudRadio Value="@Algorithm.RSA">RSA</MudRadio>
                <MudRadio Value="@Algorithm.EllipticCurve">Elliptic Curve</MudRadio>
            </MudRadioGroup>
            <MudDivider />
            @if (ViewModel.KeyType == Algorithm.RSA)
            {
                <MudRadioGroup @bind-Value="@ViewModel.KeyLength" T="int" Disabled="ViewModel.SelectedCa!=null">
                    <MudRadio Value="@(2048)">2048 bit</MudRadio>
                    <MudRadio Value="@(3072)">3072 bit</MudRadio>
                    <MudRadio Value="@(4096)">4096 bit</MudRadio>
                </MudRadioGroup>
            }
            else if (ViewModel.KeyType == Algorithm.EllipticCurve)
            {
                <MudRadioGroup @bind-Value="@ViewModel.Curve" T="EllipticCurve" Disabled="ViewModel.SelectedCa!=null">
                    <MudRadio Value="@(EllipticCurve.P256)">P256</MudRadio>
                    <MudRadio Value="@(EllipticCurve.P384)">P384</MudRadio>
                    <MudRadio Value="@(EllipticCurve.P521)">P521</MudRadio>
                    <MudRadio Value="@(EllipticCurve.P256K)">P256K</MudRadio>
                </MudRadioGroup>
            }
        </MudCollapse>
        <div class="d-flex align-center justify-space-between">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="OnSubmitAsync">Submit</MudButton>
        </div>
    </MudForm>
</MudContainer>

@code {
    private CreateCertificateAuthorityViewModel ViewModel { get; set; } = new();
    private bool _formValid = false;
    private string[] _formErrors = { };
    private MudForm _mudForm;

    protected override async Task OnInitializedAsync()
    {
        ViewModel.OnCertificateAuthoritySlugChanged += async (c) =>
        {
            if (c != null && c != "nop")
            {
                ViewModel.SelectedCa = await CertificateAuthorityService.GetAsync(c);
                ViewModel.Country = ViewModel.SelectedCa.DistinguishedName.Country;
                ViewModel.Locale = ViewModel.SelectedCa.DistinguishedName.Locale;
                ViewModel.Organization = ViewModel.SelectedCa.DistinguishedName.Organization;
                ViewModel.OrganizationalUnit = ViewModel.SelectedCa.DistinguishedName.OrganizationalUnit;
                ViewModel.StateProvince = ViewModel.SelectedCa.DistinguishedName.StateProvince;

                ViewModel.KeyType = ViewModel.SelectedCa.KeyAlgorithm;
                if (ViewModel.SelectedCa.KeyAlgorithm == Algorithm.RSA && ViewModel.SelectedCa.KeyLength.HasValue)
                    ViewModel.KeyLength = ViewModel.SelectedCa.KeyLength.Value;
                else if (ViewModel.SelectedCa.KeyAlgorithm == Algorithm.EllipticCurve && ViewModel.SelectedCa.KeyCurve.HasValue)
                    ViewModel.Curve = ViewModel.SelectedCa.KeyCurve.Value;
                else
                    throw new InvalidCastException("Invalid values for either key size or key curve");
            }
            else
            {
                ViewModel.SelectedCa = null;
                ViewModel.Country = null;
                ViewModel.Locale = null;
                ViewModel.Organization = null;
                ViewModel.OrganizationalUnit = null;
                ViewModel.StateProvince = null;

                ViewModel.KeyType = Algorithm.RSA;
                ViewModel.KeyLength = 2048;
                ViewModel.Curve = EllipticCurve.P256;
            }
        };

        ViewModel.CertificateAuthorities = await CertificateAuthorityService.GetAllAsync();
        await base.OnInitializedAsync();
    }

    private async Task OnSubmitAsync()
    {
        await _mudForm.Validate();
        if (!_formValid)
            return;

        DateTime now = DateTime.UtcNow;
        var ca = new C.CertificateAuthority
            {
                Active = true,
                Created = now,
                IsIssuer = ViewModel.IsIssuer,
                KeyAlgorithm = ViewModel.KeyType,
                KeyCurve = ViewModel.Curve,
                KeyLength = ViewModel.KeyLength,
                Name = ViewModel.Name,
                NotAfter = now.AddMonths(ViewModel.LengthInMonths),
                NotBefore = now,
                ParentCaSlug = ViewModel.ParentCaSlug == "nop" ? null : ViewModel.ParentCaSlug,
                Updated = now,
                DistinguishedName = new C.DistinguishedName
                {
                    CommonName = ViewModel.Name,
                    Country = ViewModel.SelectedCa != null ? ViewModel.SelectedCa.DistinguishedName.Country : ViewModel.Country,
                    Locale = ViewModel.SelectedCa != null ? ViewModel.SelectedCa.DistinguishedName.Locale : ViewModel.Locale,
                    Organization = ViewModel.SelectedCa != null ? ViewModel.SelectedCa.DistinguishedName.Organization : ViewModel.Organization,
                    OrganizationalUnit = ViewModel.SelectedCa != null ? ViewModel.SelectedCa.DistinguishedName.OrganizationalUnit : ViewModel.OrganizationalUnit,
                    StateProvince = ViewModel.SelectedCa != null ? ViewModel.SelectedCa.DistinguishedName.StateProvince : ViewModel.StateProvince
                }
            };

        await CertificateAuthorityService.SaveAsync(ca, null);
        NavigationManager.NavigateTo("ca");
    }

    private async Task OnParentCaListChange(string slug)
    {
        if (slug == null)
            return;

        ViewModel.ParentCaSlug = slug;
        ViewModel.SelectedCa = slug == string.Empty ? null : await CertificateAuthorityService.GetAsync(slug);
    }

    private IEnumerable<string> ValidateExpiration(int months)
    {
        if (months == 0)
        {
            yield return "Please enter a value";
        }

        if (months > 0 && months < 12)
        {
            yield return "Please enter greater than 12 months";
        }
    }

    private IEnumerable<string> ValidateName(string name)
    {
        if (string.IsNullOrEmpty(name) || string.IsNullOrWhiteSpace(name))
        {
            yield return "Please enter a certificate name";
        }

        var regex = new Regex("[a-zA-Z0-9\\-]");
        if (!regex.IsMatch(name))
        {
            yield return "Name can only contain alphanumerics and dashes";
        }
    }
}
