@page "/certificates"
@attribute [Authorize(Roles = "NotaryAdmin,NotaryWriter,NotaryUser")]

@using Notary
@using Notary.Contract
@using Notary.Interface.Service
@using Notary.Web.ViewModels
@using Notary.Web.Shared

@inject IDialogService Dialog
@inject ICertificateService CertificateService
@inject NavigationManager NavigationManager

<PageTitle>Certificates</PageTitle>
@if (IsLoading)
{
    <MudProgressLinear Indeterminate="true" Color="Color.Primary" Striped="true" Size="Size.Medium" />
}

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-5">
    <AuthorizeView Roles="NotaryAdmin,NotaryWriter">
        <Authorized>
            <MudButton ButtonType="ButtonType.Button" Color="Color.Primary" Variant="Variant.Filled" Href="/certificates/create">Create Certificate</MudButton>
        </Authorized>
        <NotAuthorized>
            <MudButton ButtonType="ButtonType.Button" Color="Color.Primary" Variant="Variant.Filled" Disabled="true">Create Certificate</MudButton>
        </NotAuthorized>
    </AuthorizeView>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-5">
    <MudTable Items="@certificates" Hover="true" Breakpoint="Breakpoint.Sm" Loading="IsLoading" LoadingProgressColor="Color.Surface">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Expire</MudTh>
            <MudTh>Serial Number</MudTh>
            <MudTh>Thumbprint</MudTh>
            <MudTh>&nbsp;</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="@(context.RevocationDate.HasValue ? "mud-error-text" : "")" DataLabel="Name">@context.Name</MudTd>
                <MudTd Class="@(context.RevocationDate.HasValue ? "mud-error-text" : "")" DataLabel="Expire">@context.NotAfter</MudTd>
                <MudTd Class="@(context.RevocationDate.HasValue ? "mud-error-text" : "")" DataLabel="SN">@context.SerialNumber</MudTd>
                <MudTd Class="@(context.RevocationDate.HasValue ? "mud-error-text" : "")" DataLabel="CN">@context.Thumbprint</MudTd>
                <MudTd>
                    <MudFab Color="Color.Info" StartIcon="@Icons.Material.Filled.Search" Size="Size.Small" Href="@string.Format("certificate?slug={0}", context.Slug)" />
                    &nbsp;
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Download" Disabled="@context.RevocationDate.HasValue"
                        OnClick="@(()=>OnCertificateDownloadClick(context.Slug))" Size="Size.Small" />
                </MudTd>
            </RowTemplate>
            <LoadingContent>
                Please wait...
            </LoadingContent>
        </MudTable>
    </MudContainer>

    @code {
    private bool IsLoading { get; set; } = false;
    private List<Certificate> certificates = new List<Certificate>();

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await Task.Run(async () =>
        {
            certificates = await CertificateService.GetAllAsync();
            certificates = certificates.Where(c => !c.IsCaCertificate).ToList();
        });

        IsLoading = false;
    }

    private async Task OnCertificateDownloadClick(string slug)
    {
        var parameters = new DialogParameters<DownloadCertificateDialog>
        {
            { d=> d.Slug, slug }
        };
        var dialog = await Dialog.ShowAsync<DownloadCertificateDialog>("Download Certificate", parameters);
        var result = await dialog.Result;
    }
}
