@page "/ca"
@attribute [Authorize(Roles = "NotaryAdmin,NotaryWriter,NotaryUser")]
@using Notary
@using Notary.Contract
@using Notary.Interface.Service
@using Notary.Web.ViewModels
@inject IJSRuntime JS
@inject IDialogService Dialog
@inject ICertificateAuthorityService CaService
@inject ICertificateService CertificateService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-5">
    <AuthorizeView Roles="NotaryAdmin">
        <Authorized>
            <MudButton ButtonType="ButtonType.Button" Color="Color.Primary" Variant="Variant.Filled" Href="/ca/create">Create Certificate Authority</MudButton>
        </Authorized>
        <NotAuthorized>
            <MudButton ButtonType="ButtonType.Button" Color="Color.Primary" Variant="Variant.Filled" Disabled="true">Create Certificate Authority</MudButton>
        </NotAuthorized>
    </AuthorizeView>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-5">
    @if (CaList.Count > 0)
    {
        <MudTable Items="@CaList" Breakpoint="Breakpoint.Sm" Loading="@_isLoading">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Created</MudTh>
                <MudTh>Expires</MudTh>
                <MudTh>Key Type</MudTh>
                <MudTh>&nbsp;</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Created">@context.Created</MudTd>
                    <MudTd DataLabel="NotAfter">@context.NotAfter</MudTd>
                    <MudTd DataLabel="KeyType">@context.KeyAlgorithm</MudTd>
                    <MudTh>
                        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Download" Size="Size.Small" OnClick="@(()=>OnCertificateDownloadClick(context.CertificateSlug))" />
                    </MudTh>
                </RowTemplate>
            </MudTable>
    }
    else
    {
        <MudAlert Severity="Severity.Info">
            Looks like no certificate authorities have been created. Create one by clicking "Create Certificate Authority".
        </MudAlert>
    }
</MudContainer>
@code {
    private List<CertificateAuthority> CaList { get; set; } = new();
    private DownloadCertificateViewModel DownloadModel { get; set; } = new();
    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        CaList = await CaService.GetAllAsync();
        _isLoading = false;
        await base.OnInitializedAsync();
    }

    private async Task OnCertificateDownloadClick(string slug)
    {
        var dialog = await Dialog.ShowAsync<DownloadCertificateDialog>("Download Certificate");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var downloadParams = result.Data as DownloadCertificateViewModel;
            if (downloadParams == null)
                throw new InvalidCastException("Unable to convert dialog data");

            var cert = await CertificateService.GetAsync(slug);
            string fileName = string.Empty;
            var certBinary = await CertificateService.RequestCertificateAsync(slug, downloadParams.Format, downloadParams.Password);
            switch (downloadParams.Format)
            {
                case CertificateFormat.Der:
                    fileName = $"{cert.Name}.cer";
                    break;
                case CertificateFormat.Pkcs12:
                    fileName = $"{cert.Name}.pfx";
                    break;
                case CertificateFormat.Pem:
                    fileName = $"{cert.Name}.pem";
                    break;
            }
            if (certBinary != null)
            {
                using (var stream = new MemoryStream(certBinary))
                {
                    using var streamRef = new DotNetStreamReference(stream, false);
                    await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
                }
            }
        }
    }
}
