@page "/ca"
@using Notary
@using C=Notary.Contract
@using Notary.Interface.Service
@using Notary.Web.ViewModels
@inject ICertificateAuthorityService CaService
@inject NavigationManager NavigationManager

<div class="row g-3">
    <div class="col">
        <NavLink class="btn btn-outline-primary" href="ca/create" Match="NavLinkMatch.All">
            <i class="fa-sharp fa-light fa-plus"></i>&nbsp;Create New CA
        </NavLink>
    </div>
    <div class="col">
        &nbsp;
    </div>
    <div class="col">
        &nbsp;
    </div>
</div>
@if (CaList == null)
{
    <p><em>Wait...</em></p>
}
else if (CaList != null && CaList.Count == 0)
{
    <div class="alert alert-warning mt-4">
        <strong>ATTENTION</strong> - Looks like no certificate authorities have been created. Create one!
    </div>
}
else if (CaList != null && CaList.Count > 0)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Can Issue</th>
                <th>Created</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ca in CaList)
            {
                <tr>
                    <td>@ca.Name</td>
                    <td>@ca.IsIssuer</td>
                    <td>@ca.Created</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<C.CertificateAuthority> CaList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CaList = await CaService.GetAllAsync();
        await base.OnInitializedAsync();
    }
}
